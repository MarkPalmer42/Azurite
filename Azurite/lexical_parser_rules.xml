<?xml version="1.0" encoding="UTF-8"?>
<azurite>
	<lexical>
		<elements>
			<element>keyword</element>
			<element>identifier</element>
			<element>operator</element>
			<element>literal</element>
		</elements>
		<automatas>
			<automata name="keywords" type="stateless" output="keyword">
				<accepted_strings>
					<accepted_string>bool</accepted_string>
					<accepted_string>int</accepted_string>
					<accepted_string>program</accepted_string>
					<accepted_string>if</accepted_string>
					<accepted_string>else</accepted_string>
					<accepted_string>while</accepted_string>
				</accepted_strings>
			</automata>
			<automata name="boolean_literal" type="stateless" output="literal">
				<accepted_strings>
					<accepted_string>false</accepted_string>
					<accepted_string>true</accepted_string>
				</accepted_strings>
			</automata>
			<automata name="integer_literal" type="stated" output="literal">
				<states>
					<state id="0" type="start">
						<transitions>
							<transition target="1">
								<input from="0" to="9" />
							</transition>
						</transitions>
					</state>
					<state id="1" type="accepted">
						<transitions>
							<transition target="1">
								<input from="0" to="9" />
							</transition>
						</transitions>
					</state>
				</states>
			</automata>
			<automata name="string_literal" type="stated" output="literal">
				<states>
					<state id="0" type="start">
						<transitions>
							<transition target="1">
								<input>"</input>
							</transition>
						</transitions>
					</state>
					<state id="1" type="undefined">
						<transitions>
							<transition target="1" />
							<transition target="2">
								<input>"</input>
							</transition>
						</transitions>
					</state>
					<state id="2" type="accepted" />
				</states>
			</automata>
			<automata name="operator" type="stateless" output="operator">
				<accepted_strings>
					<accepted_string>&amp;&amp;</accepted_string>
					<accepted_string>||</accepted_string>
					<accepted_string>=</accepted_string>
					<accepted_string>!=</accepted_string>
					<accepted_string>==</accepted_string>
					<accepted_string>&lt;=</accepted_string>
					<accepted_string>&gt;=</accepted_string>
					<accepted_string>&lt;</accepted_string>
					<accepted_string>&gt;</accepted_string>
					<accepted_string>;</accepted_string>
					<accepted_string>(</accepted_string>
					<accepted_string>)</accepted_string>
					<accepted_string>{</accepted_string>
					<accepted_string>}</accepted_string>
					<accepted_string>+</accepted_string>
					<accepted_string>-</accepted_string>
					<accepted_string>*</accepted_string>
					<accepted_string>/</accepted_string>
					<accepted_string>+=</accepted_string>
					<accepted_string>-=</accepted_string>
					<accepted_string>*=</accepted_string>
					<accepted_string>/=</accepted_string>
					<accepted_string>;</accepted_string>
				</accepted_strings>
			</automata>
			<automata name="identifier" type="stated" output="identifier">
				<states>
					<state id="0" type="start">
						<transitions>
							<transition target="1">
								<input>_</input>
							</transition>
							<transition target="2">
								<input from="a" to="z" />
								<input from="A" to="Z" />
							</transition>
						</transitions>
					</state>
					<state id="1" type="undefined">
						<transitions>
							<transition target="2">
								<input from="a" to="z" />
								<input from="A" to="Z" />
							</transition>
						</transitions>
					</state>
					<state id="2" type="accepted">
						<transitions>
							<transition target="2">
								<input from="a" to="z" />
								<input from="A" to="Z" />
								<input from="0" to="9" />
							</transition>
							<transition target="3">
								<input>_</input>
							</transition>
						</transitions>
					</state>
					<state id="3" type="accepted">
						<transitions>
							<transition target="2">
								<input from="a" to="z" />
								<input from="A" to="Z" />
								<input from="0" to="9" />
							</transition>
						</transitions>
					</state>
				</states>
			</automata>
			<automata name="whitespace" type="stated">
				<states>
					<state id="0" type="start">
						<transitions>
							<transition target="1">
								<input>&#09;</input>
								<input>&#10;</input>
								<input>&#13;</input>
								<input> </input>
							</transition>
						</transitions>
					</state>
					<state id="1" type="accepted">
						<transitions>
							<transition target="1">
								<input>&#09;</input>
								<input>&#10;</input>
								<input>&#13;</input>
								<input> </input>
							</transition>
						</transitions>
					</state>
				</states>
			</automata>
		</automatas>
	</lexical>
</azurite>